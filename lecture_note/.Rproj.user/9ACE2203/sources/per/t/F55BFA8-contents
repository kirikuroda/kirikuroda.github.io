```{r, include=FALSE}
source("common.R")
```

# 図の体裁 {#appearance}

ggplot2はデフォルトでも十分見栄えの良いグラフを出力してくれる。しかし、より見やすいグラフを作るために少し工夫しなければならない場面もある。また、最後にグラフの保存方法などを解説する。

```{r}
library(ggplot2) # 忘れずにパッケージを読み込む
```


## 軸の反転

人間誰しも、グラフの軸を反転させたくなるときがある^[異論は……。]。Figure \@ref(fig:dot-plot) のClevelandのドットプロットのように`x`と`y`の変数を逆にしても良いが、ggplot2の設計上それではうまくいかない場合もある。

そのようなときは`coord_flip()`が使えば良い。これは文字通り、座標（coordination）と反転（flip）させるための関数である。

たとえば、Figure \@ref(fig:bar-plot-3)で`diamonds`データ（`cut`ごとのダイアモンドの個数）をプロットしたが、これに`coord_flip()`を付け足すと以下のようになる。

(ref:coord-flip-1) Figure \@ref(fig:bar-plot-3)の軸を反転させたグラフ。

```{r, fig.cap='(ref:coord-flip-1)'}
ggplot(diamonds, aes(cut)) + # x軸にcut；yには何も対応づける必要なし
  geom_bar() + # 棒グラフ；データの値ではなく個数を描くので、stat = "identity"は不要
  coord_flip() # 軸を反転
```

## Small multiple

プロットする変数が多く、1枚にまとめると見づらくなってしまう場合、グラフを複数個の小さなパネル（サブプロット）に分割して並べると見やすくなる。これをSmall multiple^[https://en.wikipedia.org/wiki/Small_multiple]という
。Small multipleは`facet_grid()`もしくは`facet_wrap()`で作ることができる。

たとえば、Chapter \@ref(association)で作った`mpg`の散布図（Figure \@ref(fig:scatter-plot-4)）は、`drv`と`cyl`という変数によって、以下のような小さなパネルに分割することができる。描き方は、`facet_grid(行方向の変数~列方向の変数)`である。

(ref:facet-1) `facet_grid()`を使った例。パネルが行列の形で表示される。

```{r, facet-1, fig.cap='(ref:facet-1)'}
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  facet_grid(drv ~ cyl) # drvは行方向、cylは列方向
```

---

一方、`facet_wrap()`を使うと、2変数（`drv`と`cyl`）が入れ子構造でプロットされるようになる。デフォルトでは縦横の枚数が同じになるが、`nrow`および`ncol`で行と列の数を指定できる。

(ref:facet-2) `facet_wrap()`を使った例。上のFigure \@ref(fig:facet-1)と見比べてみよう。

```{r, fig.cap='(ref:facet-2)'}
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  facet_wrap(drv ~ cyl) # 入れ子構造でプロット
```

なお、`facet_grid()`と`facet_wrap()`の両方共、1変数だけでパネルを分けることも可能である。詳しくはヘルプ（`?facet_grid()`または`?facet_wrap()`）で確認してほしい。


## テーマ

グラフの全体的な体裁は、`theme_xxxx()`で変えることができる。下の図の`theme_gray()`はggplot2のデフォルトのテーマである。

(ref:theme-1) `theme_gray()`を使った図（デフォルトのテーマ）。

```{r, fig.cap='(ref:theme-1)'}
ggplot(mtcars, aes(wt, mpg)) +
  geom_point() +
  theme_gray()
```

論文用の図として作ったり、大きなディスプレイに映したりする場合は、`theme_bw()`または`theme_classic()`が良いだろう。

(ref:theme-2) `theme_bw()`を使った図。

```{r, fig.cap='(ref:theme-2)'}
ggplot(mtcars, aes(wt, mpg)) +
  geom_point() +
  theme_bw()
```

(ref:theme-3) `theme_classic()`を使った図。

```{r, fig.cap='(ref:theme-3)'}
ggplot(mtcars, aes(wt, mpg)) +
  geom_point() +
  theme_classic()
```

その他のテーマについては、https://ggplot2.tidyverse.org/reference/ggtheme.html を見てほしい。

## 色

今までのグラフで散々見てきたように、`fill`や`color`でグルーピングを行うと、ggplot2のデフォルトのパステルカラーが適用される。ただ、この色は変えたい場合が多いだろう。

たとえば、下のように`scale_color_manual()`という関数を使うと、`color`で指定した変数を自分の好きな色に変えることができる^[なお、グラフで原色を使うのはおすすめしない。Figure \@ref(fig:color-1)から明らかなように、目がチカチカしてしまうし、背景が明るいとデータポイントが見えにくくなる場合もある。また、色覚バリアフリーという点でもNGである。]。`fill`で指定した変数の色を変える場合は、`scale_fill_manual()`という関数を使うと良い。

(ref:color-1) `scale_color_manual()`によって色を変えたグラフ。

```{r, color-1, fig.cap='(ref:color-1)'}
ggplot(mtcars, aes(wt, mpg, color = factor(cyl))) +
  geom_point() +
  scale_color_manual(values = c("red","blue","green"))
```

ggplot2には、他にも色や見た目を調整するための様々な関数がある。また、色の調整にはcolorspaceというパッケージが便利だが、本資料はあくまで最低限のレベルの可視化について解説するものなので、ここではあまり深く突っ込まないことにする^[ここまでついてこれた人であれば、自力で検索してマスターできるだろう（たぶん）。]。


## 軸

デフォルトの設定だと、変数名がそのまま軸のラベルになってしまう。データを探索的に分析（**data exploration**）している最中はそれで問題ないかもしれない。しかし、内容を他の人と共有（**data presentation**）したい場合は、なるべくわかりやすくするため、軸名を変えなくてはならないだろう^[気配りと言うほどのものでもないが、こういうことをやるかやらないかで、ゼミメンバーや聴衆が自分の話を聞く態度は変わってくるだろう（たぶん）。]。

グラフの軸ラベルは`labs()`という関数で一括変更することができる。なお、下では具体例として`Title`や`Subtitle`なども指定しているが、実用上はごちゃごちゃしてしまうだけなので、基本的には指定しなくても良い。

(ref:label-1) `labs()`を使い、軸名をデフォルトから変更したグラフ。

```{r, fig.cap='(ref:label-1)'}
ggplot(mtcars, aes(wt, mpg, color = factor(cyl))) +
  geom_point() +
  labs(x = "Weight (1,000 Ibs)",
       y = "Miles/(US) gallon",
       title = "Title",
       subtitle = "Subtitle",
       caption = "Caption",
       tag = "Tag")
```

## 凡例

ここでは、凡例を「消す」方法を解説する。なぜなら、凡例がなくとも自明な場合も多いからである。下の図はFigure \@ref(fig:boxplot-1)の凡例を消したグラフである。

(ref:legend-1) 凡例を消したグラフ。

```{r, legend-1, fig.cap='(ref:legend-1)'}
ggplot(PlantGrowth, aes(group, weight, fill = group)) + # x軸にgroup、y軸にweight；fillで色の塗りつぶし
  geom_boxplot() + # 箱ひげ図
  guides(fill = FALSE) # 凡例（ここではfill）を消すためのコード
```


## 複数パネルのグラフ

論文などを描く際、複数個のグラフを組み合わせて1枚のグラフにしたいことがある。そのときは、patchworkパッケージを使うと良い。patchworkは以下の手順でインストールする。

```{r, eval=FALSE}
library(devtools)
install_github("thomasp85/patchwork") # パッケージのインストール
```

```{r}
library(patchwork) # パッケージの読み込み
```

patchworkを使うと、たとえば下のように、複数のパネルを直観的に組み合わせることができる。

(ref:patchwork-1) 2枚のパネルを組み合わせたグラフ。

```{r, fig.cap='(ref:patchwork-1)'}
# まずパネルa（panel_a）を作る
panel_a = ggplot(mtcars, aes(wt, mpg, color = factor(cyl))) +
  geom_point()

# 次にパネルb（panel_b）を作る
panel_b = ggplot(mtcars, aes(wt, disp, color = factor(cyl))) +
  geom_point()

# 2つを足し算して1枚のグラフ（panel_ab）にし、1列に並べる（ncol = 1）
panel_ab = panel_a + panel_b + 
  plot_layout(ncol = 1) + 
  plot_annotation(tag_levels = "a") # 最後にタグを付ける

panel_ab
```


## グラフの保存

論文にグラフを貼り付ける前に、当然グラフを画像ファイルとして保存しなければならない。上で作った`panel_ab`を"panel_ab.pdf"として保存してみよう。グラフは`ggsave("保存するファイル名", plot = グラフのオブジェクト, width = 幅, height = 高さ, units = "サイズの単位")`で保存することができる。

```{r, eval = FALSE}
ggsave("panel_ab.pdf", plot = panel_ab, width = 14, height = 14, units = "cm")
```

なお、余程のことがない限り、グラフは基本的にPDF形式で保存するのが良い^[PDF形式で保存する場合、色々面倒なことが起こるかもしれないが、そこら辺はググって解決しよう。]。なぜPDFが良いのかはGoogleが教えてくれるだろう。


## 練習問題

- gcookbookの`heightweight`データを使い、性別ごとにパネルを分けた上で、身長と体重の散布図を描いてみよう。また、凡例を消し、軸ラベルをわかりやすく書き直してみよう（日本語だとうまく表示されない可能性があるので、英語で良い）。余力があれば、各パネル（サブプロット）のラベルも書き直してみよう。

```{r, include=FALSE}
library(gcookbook)
ggplot(heightweight, aes(heightIn, weightLb, color = sex)) +
  geom_point() +
  facet_wrap(~sex) +
  guides(color = FALSE)
```

