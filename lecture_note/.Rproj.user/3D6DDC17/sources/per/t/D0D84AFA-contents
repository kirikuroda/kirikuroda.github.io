```{r, include=FALSE}
source("common.R")
```

# 数量 {#amount}

基本中の基本として、まずは数量（数値、個数、比率、順位など）を可視化してみよう。

## 棒グラフ

### 基本の棒グラフ

数量の可視化で最も代表的、かつ馴染み深いのは<u>**棒グラフ**</u>（bar plot; bar graph; bar chart）だろう。

まず、最も基本的な棒グラフを描いてみよう。使うデータは、gcookbookパッケージの```pg_mean```（植物の重さに関するデータセット）である。まず、gcookbookを読み込む。

```{r}
library(gcookbook)
```

データの中身は以下の通りである。

```{r}
head(pg_mean) # データが3行しかないのですべて表示される
```

2つの変数はそれぞれ

- ```group```：実験条件（3水準）

- ```weight```：植物の重さの平均値

を表している。素朴に思いつくのは、「条件をx軸に、重さをy軸に取った棒グラフ」だろう。棒グラフ（bar plot）なので、素直に```geom_bar()```を使って図を描いてみよう。

```ggplot(pg_mean, aes(group, weight)) + geom_bar()```

しかしこれだと、

```エラー: stat_count() must not be used with a y aesthetic.```

というエラーメッセージが出るはずである。なぜなら、```geom_bar()```は、データの**個数**を描くのがデフォルト（```stat = "count"```という設定^[ここら辺のことはいずれわかるようになるので、そういうものだと飲み込んでほしい。]）になっているからである。棒グラフで**数値**を表現するには、下のように```stat = "identity"```と設定しておく必要がある。

(ref:bar-plot) 棒グラフ。x軸は条件、y軸は植物の平均重量を表している。

```{r, fig.cap='(ref:bar-plot)'}
ggplot(pg_mean, aes(group, weight)) +
  geom_bar(stat = "identity") #このように設定する必要あり。個数ではなく「weightと同じ（identityな）値」をプロットしてくださいということ。
```

ひとまず、数値を表す棒グラフを描くことができた。


### グルーピングされた棒グラフ

では、ここに変数を1つ追加してみよう。次に使うデータはgcookbookの```cabbage_exp```（キャベツに関するデータセット）である。

```{r}
head(cabbage_exp) # 6行しかないのですべて表示される
```

注目する変数は以下の3つである。

- ```Date```：キャベツの栽培期間（d16, d20, or d21）

- ```Cultivar```：キャベツの品種（c39 or c52）

- ```Weight```：キャベツの重量（kg）

このとき、栽培期間と品種ごとにキャベツの重量を描いてみたいと思わない人はいない^[異論は認めない。]。このようなときは、```Date```を```x```、```Weight```を```y```、```Cultivar```を```fill```に対応づけて描くと良い。

(ref:bar-plot-stack) 栽培期間と品種ごとにキャベツの重量を表している棒グラフ。

```{r, bar-plot-stack, fig.cap='(ref:bar-plot-stack)'}
ggplot(cabbage_exp, aes(Date, Weight, fill = Cultivar)) + # fill = CultivarでCultivarを追加
  geom_bar(stat="identity")
```

このように、2つの変数ごとに棒グラフを描きたい（グルーピングしたい）場合は、```fill```に変数を追加すれば良い。```fill```は「塗りつぶし」を意味しており、実際```Cultivar```の種類に応じて棒が塗りつぶされていることがわかる^[「色なのだから、```color```に変数を指定するのでは？」と思った人がいるかもしれない。たしかに、```geom_bar()```で```color```に変数を指定すると、棒の**枠の色**が変わる。しかし、棒の枠に色をつけても基本的にはうざったいだけなので、変数を指定する必要はない。]。

---

しかし、Figure \@ref(fig:bar-plot-stack)にはまだ改善の余地があるだろう。たとえば、```geom_bar()```はデフォルト設定が「積み上げ棒グラフ（```position = "stack"```）」になっているが、これは割合や比率を表すのによく使われるグラフ^[また、```position = "fill"```にすれば、全体を100%にした積み上げ棒グラフを描くことができる。これも割合や比率を表すのによく使われる。]であり、今回用いるのは妥当ではないだろう。これは以下のように変更したほうが良い。

(ref:bar-plot-dodge) Figure \@ref(fig:bar-plot-stack)の棒の位置をCultivarごとに水平方向にずらしたもの。

```{r, fig.cap='(ref:bar-plot-dodge)'}
ggplot(cabbage_exp, aes(Date, Weight, fill = Cultivar)) +
  geom_bar(stat = "identity", position = "dodge") # position = "dodge" を追加
```

このように、```geom_bar()```に```position = "dodge"```を追加することで、```fill```で指定した変数に応じて棒の位置をずらしてくれる。


### 個数を表す棒グラフ

では、データの数値ではなく、データの**個数**（カウントデータ）はどのようにプロットすればよいだろうか？　この例では、ggplot2の```diamonds```（ダイアモンドに関するデータセット）を使ってみよう。

```{r}
head(diamonds) # 先頭6行
```

ここでは```cut```という変数に着目してみよう。

- ```cut```：ダイアモンドのカットの質（Fair, Good, Very Good, Premium, or Ideal）

ダイアモンドの個数をカットに応じてプロットしてみよう。なお、```geom_bar()```はデータの個数を自動的に数えてくれるので、```y```に変数を対応づける必要はない。

(ref:bar-plot-count) カットごとのダイアモンドの個数。

```{r, fig.cap='(ref:bar-plot-count)'}
ggplot(diamonds, aes(cut)) + # yには何も対応づける必要なし
  geom_bar() # 今回はデータの値ではなく個数を描くので、stat = "identity"は不要
```

無事に個数をプロットすることができた。


## Clevelandのドットプロット

数量の可視化に向いているのは棒グラフだけではない。というよりもむしろ、棒グラフが可視化に向かない場合もある。たとえば、gcookbookの```tophitters2001```（2001年MLBの上位144打手のデータセット）を使ってそれを見てみよう。

```{r}
head(tophitters2001)
```

変数がたくさんあるが、とりあえず

- ```name```：打手の名前

- ```avg```：打率

に注目してみよう。なお、データが144行と少し多いので、わかりやすさのため先頭の20名のデータだけを使うことにする。20名のデータは```top20hitters```に代入する。

```{r}
top20hitters = tophitters2001[1:20,] # 先頭20行を抽出してtop20hittersに代入
```

それでは、この```top20hitters```を使って、まずは打手ごとの打率を素直に棒グラフで描いてみよう。

(ref:bar-plot-top20) 2001年MLBのトップ20の打率。

```{r, bar-plot-top20, fig.cap='(ref:bar-plot-top20)'}
ggplot(top20hitters, aes(name, avg)) +
  geom_bar(stat = "identity")
```

これを見てどのように思うだろうか？　おそらく「あまり美しくない」と感じる人が多いだろう。ではどこが問題なのか。大きく2つの問題点が挙げられるだろう。

**問題1. 選手ごとの打率の違いが明確に見えない**

- 棒グラフはy = 0から始まるという性質がある^[逆に、y = 0から始まっていない棒グラフを見た場合、少し疑ってかかったほうが良い。このような棒グラフは結構巷にあふれている。]。しかし、今回のデータの値（打率）は基本的に0.3前後なので、y = 0をグラフに含めるとデータの特徴が見えづらくなってしまう。このような場合、棒グラフは可視化に向いていない。

**問題2. 打率の高低によって選手が並び替えられていない（ソートされていない）**

- これは棒グラフ自体の問題ではないが、可視化において重要なポイントである。これも直す必要があるだろう。

---

これらの問題に対する解決策の1つとして、<u>**Clevelandのドットプロット**</u>（Cleveland dot plot）というものがある。ドットプロットというくらいなので、散布図のようにデータをドットで表現する手法である。手順を追って見ていこう。

まず、先程の```geom_bar(stat = "identity")```を```geom_point()```に切り替えてみよう。なお、```geom_point()```では```stat = "identity"```がデフォルトなので、```geom_bar()```とは異なり、```stat```の中身を明示的に指示する必要がない。

(ref:dot-plot) 打率データをドットで表したグラフ。

```{r, dot-plot, fig.cap='(ref:dot-plot)'}
ggplot(top20hitters, aes(name, avg)) +
  geom_point() # ここの部分だけ変更
```

上の図では、選手ごとの打率の違いが見えにくいという問題が解決されている。しかし、打率によって選手名がソートされていないので、グラフはかえって見にくくなってしまった。では、ここで以下のようにコードを書いてみよう。

(ref:dot-plot-2) Figure \@ref(fig:dot-plot)のx軸（打手名）を打率によってソートした図。

```{r, dot-plot-2, fig.cap='(ref:dot-plot-2)'}
ggplot(top20hitters, aes(reorder(name, avg), avg)) + # reorder(name, avg)を追加
  geom_point()
```

```reorder(a, b)```は、aをbの値で（昇順に）ソートする関数である。つまり、今回の例では、打率（```avg```）でソートした選手名（```name```）を```x```に代入したということになる。これでだいぶ見やすくなったかと思う。```reorder()```はデータの**順序情報**（順位など）を強調する際に使うと効果的である。

---

もう一捻り加えてみよう。

上の図では、x軸の各選手の名前が重なって、判読不可能になってしまっている。このようなときは```x```と```y```の変数をひっくり返せば良い。

(ref:dot-plot-3) Clevelandのドットプロット。

```{r, dot-plot-3, fig.cap='(ref:dot-plot-3)'}
ggplot(top20hitters, aes(avg, reorder(name, avg))) + # xとyの変数を交換
  geom_point()
```

Perfect.

これがClevelandのドットプロット^[類似のグラフとしてロリポッププロット（lollipop plot; lollipop chart）というものもある。]である。改めて最初のFigure \@ref(fig:bar-plot-top20)と最後のFigure \@ref(fig:dot-plot-3)を見比べると、明らかにグラフの見栄えが改善していることがわかる。

## 練習問題

- ```cabbage_exp```のデータを使い、<u>x軸に```Cultivar```、y軸に```Weight```、```Date```で色分けした棒グラフ</u>を描いてみよう。

```{r, include=FALSE}
ggplot(cabbage_exp, aes(Cultivar, Weight, fill = Date)) +
  geom_bar(stat = "identity", position = "dodge")
```

- ```diamonds```のデータを使い、<u>```clarity```（輝きの等級）ごとにダイアモンドの個数をプロット</u>してみよう。

```{r, include=FALSE}
ggplot(diamonds, aes(clarity)) +
  geom_bar()
```

- gcookbookの```uspopchange```のデータ構造を確認しよう（```?uspopchange``` と ```head(uspopchange)```）。その上で、この章で学んだテクニックを使い、<u>州ごとに人口がどれくらい増減したかをプロット</u>してみよう。また、どのようなデザインでプロットするのが最も妥当かつ見栄えが良いかを考えてみよう。

```{r, include=FALSE}
ggplot(uspopchange, aes(reorder(State, Change), Change)) +
  geom_bar(stat = "identity") +
  coord_flip()
```
